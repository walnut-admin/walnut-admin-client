/**
 * Generated by Doubao, optimised by me
 * Create a timer with percentage tracking
 * @param durationRef Total timer duration (in milliseconds), supports reactive Ref
 * @param callback Callback function triggered on time update
 */
export function useIntervalFnWithPercent(
  durationRef: Ref<number>,
  callback: () => void,
) {
  const percentInterval = 33 // Interval for updating percentage (ms)

  const flag = ref(true) // Flag for timer state control
  const startTime = ref<number>() // Record start time of the timer cycle
  const elapsed = ref(0) // Elapsed time in current cycle (ms)

  // Calculate and return current progress percentage
  const percentage = computed(() =>
    +Math.min(100, (elapsed.value / durationRef.value) * 100).toFixed(2),
  )

  // Watch percentage changes (throttled) and reset when reaching 100%
  watchThrottled(() => percentage.value, async (v) => {
    if (v >= 100) {
      flag.value = false
      await nextTick() // Wait for DOM update cycle to complete
      reset()
      flag.value = true
    }
  }, { throttle: 250, immediate: true })

  // Update elapsed time
  const updateTime = () => {
    const now = Date.now()
    if (!startTime.value)
      startTime.value = now

    // Calculate actual elapsed time since last update
    const delta = now - (startTime.value + elapsed.value)

    // Avoid abnormal large time gaps (e.g., page unfreezes after being frozen)
    if (delta < 1000) {
      elapsed.value += delta
    }
  }

  // Create two independent useIntervalFn instances (for callback & percentage update)
  const timeControls = useIntervalFn(
    callback,
    durationRef,
    { immediate: true }, // Trigger callback immediately on initialization
  )

  const percentControls = useIntervalFn(
    updateTime,
    percentInterval,
    { immediateCallback: true }, // Trigger updateTime immediately on initialization
  )

  // Combine states of both intervals to determine if timer is active
  const isActive = computed(() => timeControls.isActive.value && percentControls.isActive.value)

  // Start the timer
  function start() {
    timeControls.resume()
    percentControls.resume()
  }

  // Pause the timer
  function pause() {
    timeControls.pause()
    percentControls.pause()
    startTime.value = undefined // Clear start time to reset delta calculation on resume
  }

  // Reset the timer to initial state
  function reset() {
    pause()
    startTime.value = Date.now()
    elapsed.value = 0
    start()
  }

  // Auto-start timer when component mounts
  onMounted(start)

  // Auto-pause timer when component unmounts to prevent memory leaks
  onUnmounted(pause)

  return {
    start, // Start timer method
    pause, // Pause timer method
    flag, // Timer state control flag
    percentage, // Current progress percentage (reactive)
    elapsed, // Elapsed time in current cycle (reactive, ms)
    isActive, // Whether timer is actively running (reactive)
  }
}
