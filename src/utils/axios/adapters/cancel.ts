import type { AxiosAdapter, AxiosRequestConfig } from 'axios'
import { buildSortedURL } from '../utils'

/**
 * @description First version use cancel token
 * then transform to AbortController by doubao
 */

interface IAxiosCancelPoolItem {
  // key, generated by buildSortedURL
  k: string
  // path, location.pathname
  p: string
  // AbortController instance
  ac: AbortController
}

const AxiosCancelPoolRef = shallowRef(new Map<string, IAxiosCancelPoolItem>())

function addToCancelPool(config: AxiosRequestConfig, id: string, pathname: string, controller: AbortController) {
  const key = buildSortedURL(config.url, config.params, config.paramsSerializer)

  AxiosCancelPoolRef.value.set(id, {
    k: key,
    p: pathname,
    ac: controller,
  })
}

function removeFromCancelPool(id: string, excuteCancel = false) {
  const target = AxiosCancelPoolRef.value.get(id)

  if (target) {
    excuteCancel && target.ac.abort()
    AxiosCancelPoolRef.value.delete(id)
  }
}

// cancel the latest request that do not receive a response
export function removeLatestRequest() {
  const lastestItem = Array.from(AxiosCancelPoolRef.value).pop()

  if (lastestItem) {
    lastestItem[1].ac.abort('Remove latest request')
    AxiosCancelPoolRef.value.delete(lastestItem[0])
  }
}

// cancel all the request that currently do not have a response
export function removeAllCancel() {
  const arr = Array.from(AxiosCancelPoolRef.value)

  for (let i = 0; i < arr.length; i++) {
    const id = arr[i][0]
    const element = arr[i][1]
    element.ac.abort('Remove all cancel requests')
    AxiosCancelPoolRef.value.delete(id)
  }
}

// remove all requests in current page from cancel pool
export function removeCurrentPageRequests(path: string) {
  const arr = Array.from(AxiosCancelPoolRef.value).filter(i => i[1].p === path)

  for (let i = 0; i < arr.length; i++) {
    const id = arr[i][0]
    const element = arr[i][1]
    element.ac.abort('Remove current page requests')
    AxiosCancelPoolRef.value.delete(id)
  }
}

export function cancelAdapter(adapter: AxiosAdapter): AxiosAdapter {
  return async (config) => {
    if (!config._cancelOnRouteChange)
      return await adapter(config)

    const requestId = config._requestId!

    // create AbortController and add to cancel pool
    const controller = new AbortController()
    config.signal = controller.signal // 设置 AbortSignal
    addToCancelPool(config, requestId, location.pathname, controller)

    try {
      const res = await adapter(config)
      // request finished successfully, remove from the cancel pool
      removeFromCancelPool(requestId)
      return res
    }
    catch (error) {
      // request failed, remove from the cancel pool
      removeFromCancelPool(requestId)
      return Promise.reject(error)
    }
  }
}
